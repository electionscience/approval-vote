function p(){}function x(t,n){for(const e in n)t[e]=n[e];return t}function k(t){return t()}function C(){return Object.create(null)}function w(t){t.forEach(k)}function j(t){return typeof t=="function"}function F(t,n){return t!=t?n==n:t!==n||t&&typeof t=="object"||typeof t=="function"}function M(t){return Object.keys(t).length===0}function E(t,...n){if(t==null){for(const o of n)o(void 0);return p}const e=t.subscribe(...n);return e.unsubscribe?()=>e.unsubscribe():e}function P(t,n,e){t.$$.on_destroy.push(E(n,e))}function S(t,n,e,o){if(t){const u=b(t,n,e,o);return t[0](u)}}function b(t,n,e,o){return t[1]&&o?x(e.ctx.slice(),t[1](o(n))):e.ctx}function U(t,n,e,o){return t[2],n.dirty}function A(t,n,e,o,u,y){if(u){const m=b(n,e,o,y);t.p(m,u)}}function B(t){if(t.ctx.length>32){const n=[],e=t.ctx.length/32;for(let o=0;o<e;o++)n[o]=-1;return n}return-1}function D(t){return t??""}function G(t){return t&&j(t.destroy)?t.destroy:p}let a;function l(t){a=t}function _(){if(!a)throw new Error("Function called outside component initialization");return a}function H(t){_().$$.on_mount.push(t)}function I(t){_().$$.after_update.push(t)}function J(t,n){return _().$$.context.set(t,n),n}const s=[],d=[];let r=[];const h=[],g=Promise.resolve();let f=!1;function v(){f||(f=!0,g.then(q))}function K(){return v(),g}function O(t){r.push(t)}const i=new Set;let c=0;function q(){if(c!==0)return;const t=a;do{try{for(;c<s.length;){const n=s[c];c++,l(n),z(n.$$)}}catch(n){throw s.length=0,c=0,n}for(l(null),s.length=0,c=0;d.length;)d.pop()();for(let n=0;n<r.length;n+=1){const e=r[n];i.has(e)||(i.add(e),e())}r.length=0}while(s.length);for(;h.length;)h.pop()();f=!1,i.clear(),l(t)}function z(t){if(t.fragment!==null){t.update(),w(t.before_update);const n=t.dirty;t.dirty=[-1],t.fragment&&t.fragment.p(t.ctx,n),t.after_update.forEach(O)}}function L(t){const n=[],e=[];r.forEach(o=>t.indexOf(o)===-1?n.push(o):e.push(o)),e.forEach(o=>o()),r=n}export{U as a,P as b,S as c,J as d,I as e,d as f,B as g,M as h,j as i,a as j,C as k,q as l,l as m,p as n,H as o,L as p,O as q,w as r,F as s,K as t,A as u,k as v,s as w,v as x,G as y,D as z};
